1. 한글 인코딩 작업

페이지 : web.xml

<!-- 한글 인코딩 필터 설정 작업 -->
<filter>
   <filter-name>encodingFilter</filter-name>
   <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

   <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
   </init-param>
   
   <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
   </init-param>
</filter>

<filter-mapping>
   <filter-name>encodingFilter</filter-name>
   <url-pattern>*.do</url-pattern>
</filter-mapping>

******************************************************************************************************************************

2. MyBatis를 이용한 JDBC Connection 설정

페이지 : root-context.xml

<bean name="dataSource"
	class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	   <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
	   <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
	   <property name="username" value="system" />
	   <property name="password" value="1234" />
</bean>

<!-- 2. SQLSessionFactoryBean설정	 -->
<bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="mapperLocations" value="classpath:/mapper/*.xml"/>
</bean>

<!-- 3. SqlSessionTemplate 클래스 설정 -->
<bean name="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg ref="sqlSessionFactory"></constructor-arg>
</bean>

******************************************************************************************************************************

3. 라이브러리 가져오기

페이지 : pom.xml

<!-- MyBatis 라이브러리 -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.4.6</version>
</dependency>

<!-- MyBatis-spring 라이브러리 -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>1.3.1</version>
</dependency>

<!-- Spring-jdbc 라이브러리 -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>${org.springframework-version}</version>
</dependency>

<!-- spring DBCP -->
<dependency>
    <groupId>commons-dbcp</groupId>
    <artifactId>commons-dbcp</artifactId>
    <version>1.4</version>
</dependency>

<!-- lombok 라이브러리 -->
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.24</version>
   <scope>provided</scope>
</dependency>

******************************************************************************************************************************

4. controller 경로 설정하기

페이지 : servlet-context.xml

<context:component-scan base-package="com.spring" />		
// com.spring으로 시작하는 controller 패키지를 훑고 실행 한다. 해당 패키지에 @Controller, @Service, @Component,
   @Repository 애노테이션이 있으면 해당 클래스를 자동 빈으로 등록해 주는 태그.

******************************************************************************************************************************

5. homeController 경로 설정하기

페이지 : com.spring.mybatis01.HomeController

package com.spring.mybatis01;

import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		
		return "main";
	}
	
}

******************************************************************************************************************************

6. DAO , DTO , Implements 만들기

페이지 : com.spring.model.MemberDAO

package com.spring.model;

import java.awt.List;

public interface MemberDAO {
	
	java.util.List<MemberDTO> getMemberList();
	
	int insertMember(MemberDTO dto);
	
	MemberDTO getMember(int num);
	
	int updateMember(MemberDTO dto);
	
	int deleteMember(int num);
	
	void updateSeq(int num);
	
	java.util.List<MemberDTO> searchmemberlistList(String field,String keyowrd);
	
}

페이지 : com.spring.model.MemberDTO

package com.spring.model;

import lombok.Data;

@Data
public class MemberDTO {
	private int num;
	private String memid;
	private String memname;
	private String pwd;
	private int age;
	private int mileage;
	private String job;
	private String addr;
	private String regdate;
}

페이지 : com.spring.model.MemberDAOImpl

package com.spring.model;

import java.util.List;

import javax.inject.Inject;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.stereotype.Repository;

@Repository
public class memberDAOImpl implements MemberDAO {
	
	@Inject
	private SqlSessionTemplate sqlSession;
	
	@Override
	public List<MemberDTO> getMemberList() {
		return null;
	}

	@Override
	public int insertMember(MemberDTO dto) {
		return null;
	}

	@Override
	public MemberDTO getMember(int num) {
		return null;
	}

	@Override
	public int updateMember(MemberDTO dto) {
		return null;
	}

	@Override
	public void updateSeq(int num) {
		return null;
	}

	@Override
	public List<MemberDTO> searchmemberlistList(String field, String keyowrd) {
		return null;
	}

	@Override
	public int deleteMember(int num) {
		return null;
	}

}


******************************************************************************************************************************

7. MemberController를 통해 JSP에서 넘어온 submit 값들을 메소드로 반환하여 데이터베이스에 추가 수정 삭제 할 그릇(class)만들기

페이지 : com.spring.mybatis01.MemberController

import java.io.PrintWriter;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.spring.model.MemberDAO;
import com.spring.model.MemberDTO;

@Controller
public class MemberController {
	
	@Inject
	private MemberDAO dao;
}

******************************************************************************************************************************

8. SQL문을 받아줄 XML 파일 만들기

페이지 : src/main/resources >> mapper 패키지 생성 >> member.xml 생성

<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	DTD(Document Type Definition)
	 - 작성한 문서가 어떤 문서인지에 대해서 정의해 놓은 것
	 - 하나의 시스템 내에서 사용할 xml 데이터의 구조를 정의하여 유효성을 점검시 사용하는 태그
 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- namespace명은 패키지명을 포함해서 dao 인터페이스 이름으로 작성하는 것이 관례이다.
 		namespace 명은 mapper들을 구분하는데 식별자로 사용이 된다. 
   -->
  <mapper namespace="com.spring.model.MemberDAO">
	
		

  </mapper>

******************************************************************************************************************************

9. main페이지 만들기

페이지 : main.jsp

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page session="false" pageEncoding="UTF-8"%>	

<!-- 
	메인페이지는 web.xml파일을 실행하기 전에 실행되므로 web.xml에서 작성한 인코딩 작업이 되지않기 때문에
	인코딩작업을 따로 해주어야 한다.
 -->

<html>
<head>
	<title>Home</title>
</head>
<body>
	
	<div align="center" >
		<hr width="50%" color="marmoon">
			<h3>MEMBER10 테이블 메인 페이지</h3>
		<hr width="50%" color="marmoon">
		<br>
		<a href="<%=request.getContextPath() %>/member_list.do">[전체 리스트 보기]</a>
	</div>
</body>
</html>
